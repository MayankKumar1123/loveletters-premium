{"ast":null,"code":"import _slicedToArray from\"/Users/tejal/yo/loveletters-premium/react/game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/tejal/yo/loveletters-premium/react/game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tejal/yo/loveletters-premium/react/game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/tejal/yo/loveletters-premium/react/game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/tejal/yo/loveletters-premium/react/game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/tejal/yo/loveletters-premium/react/game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'bootstrap/dist/css/bootstrap.css';import Button from'react-bootstrap/Button';import Badge from'react-bootstrap/Badge';import ListGroup from'react-bootstrap/ListGroup';import'./Game.css';import{Row,Col}from'react-bootstrap';var PlayCard=/*#__PURE__*/function(_React$Component){_inherits(PlayCard,_React$Component);var _super=_createSuper(PlayCard);function PlayCard(props){var _this;_classCallCheck(this,PlayCard);_this=_super.call(this,props);_this.state={selectedPlayers:[],selectionSatisfied:false,selectedCard:\" \"};_this.selectPlayer=_this.selectPlayer.bind(_assertThisInitialized(_this));_this.selectCard=_this.selectCard.bind(_assertThisInitialized(_this));_this.endPlay=_this.endPlay.bind(_assertThisInitialized(_this));_this.getList=_this.getList.bind(_assertThisInitialized(_this));return _this;}_createClass(PlayCard,[{key:\"selectPlayer\",value:function selectPlayer(type,item){var selectedPlayers=null;var x=0;if(type==='single'){selectedPlayers=[item];if(this.props.cardPlayed!==\"Guard\")this.setState({selectionSatisfied:true,selectedPlayers:selectedPlayers});else this.setState({selectedPlayers:selectedPlayers});}else{if((x=this.state.selectedPlayers.indexOf(item))>=0){selectedPlayers=this.state.selectedPlayers;selectedPlayers.splice(x,1);}else{selectedPlayers=this.state.selectedPlayers.concat(item);}if(type==='double'){if(selectedPlayers.length===2){this.setState({selectionSatisfied:true,selectedPlayers:selectedPlayers});}else{this.setState({selectionSatisfied:false,selectedPlayers:selectedPlayers});}}else{if(selectedPlayers.length===1||selectedPlayers.length===2){this.setState({selectionSatisfied:true,selectedPlayers:selectedPlayers});}else{this.setState({selectionSatisfied:false,selectedPlayers:selectedPlayers});}}}console.log('selected player:'+selectedPlayers);}},{key:\"selectCard\",value:function selectCard(item){this.setState({selectionSatisfied:true,selectedCard:item});console.log('selected card:'+item);}},{key:\"endPlay\",value:function endPlay(){var current_cards={\"p1\":\"Guard\",\"p2\":\"Jester\",\"p3\":\"Baron\"};var valuesToSend={};this.state.selectedPlayers.map(function(item,i){valuesToSend[item]=current_cards[item];});//socket.current_cards[item];\nvaluesToSend[this.props.currentPlayer]=this.props.cardRemaining;if(this.props.cardPlayed===\"Guard\")valuesToSend[\"Guessed\"]=this.state.selectedCard;console.log(valuesToSend);//getResult(valuesToSend);\nvar results={};//0 : no change (ex.Priest)\nresults[this.state.selectedPlayer]=1;//won\nresults[this.props.currentPlayer]=-1;//lost and eliminated\n//display the result\nthis.props.roundCallback(results);}},{key:\"getList\",value:function getList(){var _this2=this;//Eliminated?? ICON! Immune?? ICON!\nvar list=null;if([\"Assassin\",\"Constable\",\"Count\",\"Countess\",\"Handmaid\",\"Princess\"].indexOf(this.props.cardPlayed)>=0){//no action\nlist=null;console.log('list is null');}else{var enableCurrent=this.props.cardPlayed===\"Prince\"||this.props.cardPlayed===\"Sycophant\";var choiceType=\"\";if(this.props.cardPlayed===\"Baroness\")//one or two choices\nchoiceType=\"either\";else if(this.props.cardPlayed===\"Cardinal\")// two choices\nchoiceType=\"double\";else// single choice\nchoiceType=\"single\";list=/*#__PURE__*/React.createElement(ListGroup,null,this.props.all_players.map(function(item,i){return/*#__PURE__*/React.createElement(ListGroup.Item,{className:\"List-item-design\",variant:_this2.state.selectedPlayers.indexOf(item)>=0?'dark':'light',key:item,disabled:enableCurrent?false:item===_this2.props.currentPlayer,onClick:function onClick(e){return _this2.selectPlayer(choiceType,item,e);}},item);}));}return list;}},{key:\"render\",value:function render(){var _this3=this;var list=this.getList();var card_count={\"Assassin\":1,\"Baron\":2,\"Baroness\":2,\"Bishop\":1,\"Cardinal\":2,\"Constable\":1,\"Count\":2,\"Countess\":1,\"Dowager Queen\":1,\"Guard\":8,\"Handmaid\":2,\"Jester\":1,\"King\":1,\"Priest\":2,\"Prince\":2,\"Princess\":1,\"Sycophant\":2};if(list!=null){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Row,{style:{justifyContent:'center'}},/*#__PURE__*/React.createElement(Col,null,list),this.props.cardPlayed===\"Guard\"?/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(ListGroup,null,Object.entries(card_count).map(function(_ref){var _ref2=_slicedToArray(_ref,2),item=_ref2[0],value=_ref2[1];return/*#__PURE__*/React.createElement(ListGroup.Item,{className:\"List-item-design\",variant:_this3.state.selectedCard===item?'dark':'light',key:item,disabled:item===_this3.props.cardPlayed,onClick:function onClick(e){return _this3.selectCard(item,e);}},item,/*#__PURE__*/React.createElement(Badge,{variant:\"secondary\",style:{float:'right'}},value));}))):/*#__PURE__*/React.createElement(\"div\",null)),/*#__PURE__*/React.createElement(Row,{style:{width:'50vw',paddingTop:'10px',margin:'auto'}},/*#__PURE__*/React.createElement(Button,{size:\"lg\",block:true,className:\"Confirm-button\",disabled:!this.state.selectionSatisfied,onClick:this.endPlay},\"OK\")));}else{return/*#__PURE__*/React.createElement(\"div\",null,this.endPlay());}}}]);return PlayCard;}(React.Component);export default PlayCard;","map":{"version":3,"sources":["/Users/tejal/yo/loveletters-premium/react/game/src/PlayCard.js"],"names":["React","Button","Badge","ListGroup","Row","Col","PlayCard","props","state","selectedPlayers","selectionSatisfied","selectedCard","selectPlayer","bind","selectCard","endPlay","getList","type","item","x","cardPlayed","setState","indexOf","splice","concat","length","console","log","current_cards","valuesToSend","map","i","currentPlayer","cardRemaining","results","selectedPlayer","roundCallback","list","enableCurrent","choiceType","all_players","e","card_count","justifyContent","Object","entries","value","float","width","paddingTop","margin","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Button from 'react-bootstrap/Button';\nimport Badge from 'react-bootstrap/Badge';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport './Game.css';\nimport {Row, Col} from 'react-bootstrap';\n\nclass PlayCard extends React.Component {\n\t\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tselectedPlayers: [],\n\t    \tselectionSatisfied: false,\n\t    \tselectedCard: \" \"\n\t    }\n\t    this.selectPlayer = this.selectPlayer.bind(this);\n\t    this.selectCard = this.selectCard.bind(this);\n\t\tthis.endPlay = this.endPlay.bind(this);\n\t\tthis.getList = this.getList.bind(this);\n\t}\n\n\tselectPlayer(type, item){ \n\t\tlet selectedPlayers = null;\n\t\tlet x = 0;\n\t\tif(type==='single') {\n\t\t\tselectedPlayers = [item];\n\t\t\tif(this.props.cardPlayed!==\"Guard\")\n\t\t\t\tthis.setState({selectionSatisfied: true, selectedPlayers: selectedPlayers});\n\t\t\telse\n\t\t\t\tthis.setState({selectedPlayers: selectedPlayers});\n\t\t}\n\t\telse {\n\t\t\tif((x=this.state.selectedPlayers.indexOf(item))>=0) {\n\t\t\t\tselectedPlayers = this.state.selectedPlayers;\n\t\t\t\tselectedPlayers.splice(x, 1);\t\n\t\t\t} else {\n\t\t\t\tselectedPlayers = this.state.selectedPlayers.concat(item);\n\t\t\t}\n\t\t\t\n\t\t\tif(type==='double') {\n\t\t\t\tif(selectedPlayers.length===2) {\n\t\t\t\t\t\tthis.setState({selectionSatisfied: true, selectedPlayers: selectedPlayers});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({selectionSatisfied: false, selectedPlayers: selectedPlayers});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(selectedPlayers.length===1 || selectedPlayers.length===2) {\n\t\t\t\t\t\tthis.setState({selectionSatisfied: true, selectedPlayers: selectedPlayers});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({selectionSatisfied: false, selectedPlayers: selectedPlayers});\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t\tconsole.log('selected player:'+selectedPlayers)\n\t}\n\tselectCard(item) {\n\t\tthis.setState({selectionSatisfied: true, selectedCard: item});\n\t\tconsole.log('selected card:'+item);\n\t}\n\n\tendPlay() {\n\t\tconst current_cards = {\n\t\t\t\t\t\t\t\t\"p1\" : \"Guard\", \n\t\t\t\t\t\t\t\t\"p2\" : \"Jester\", \n\t\t\t\t\t\t\t\t\"p3\" : \"Baron\"\n\t\t\t\t\t\t\t};\n\t\tconst valuesToSend = {};\n\t\tthis.state.selectedPlayers.map((item, i) => {\n\t\t\tvaluesToSend[item] = current_cards[item]});//socket.current_cards[item];\n\t\tvaluesToSend[this.props.currentPlayer] = this.props.cardRemaining;\n\t\t\n\t\tif(this.props.cardPlayed===\"Guard\")\n\t\t\tvaluesToSend[\"Guessed\"] = this.state.selectedCard;\n\t\tconsole.log(valuesToSend);\n\t\t\n\t\t//getResult(valuesToSend);\n\t\tconst results = {} //0 : no change (ex.Priest)\n\t\tresults[this.state.selectedPlayer] = 1;//won\n\t\tresults[this.props.currentPlayer] = -1;//lost and eliminated\n\t\t//display the result\n\t\tthis.props.roundCallback(results);\n\t}\n\n\tgetList() {\n\t\t//Eliminated?? ICON! Immune?? ICON!\n\t\tvar list = null;\n\t\tif([\"Assassin\", \"Constable\", \"Count\", \"Countess\", \"Handmaid\", \"Princess\"].indexOf(this.props.cardPlayed)>=0) { //no action\n\t\t\tlist = null;\n\t\t\tconsole.log('list is null');\n\t\t}\n\t\t\n\t\telse {\n\t\t\tvar enableCurrent = (this.props.cardPlayed===\"Prince\" || this.props.cardPlayed===\"Sycophant\");\n\t\t\tvar choiceType = \"\";\n\t\t\t\n\t\t\tif(this.props.cardPlayed===\"Baroness\") //one or two choices\n\t\t\t\tchoiceType = \"either\";\n\t\t\telse if(this.props.cardPlayed===\"Cardinal\") // two choices\n\t\t\t\tchoiceType = \"double\";\n\t\t\telse // single choice\n\t\t\t\tchoiceType = \"single\";\n\n\t  \t\tlist = (<ListGroup>\n  \t\t\t\t{this.props.all_players.map((item, i) => {\n\t\t\t\t\treturn <ListGroup.Item className='List-item-design'\n\t\t\t\t\t\t\t\tvariant={this.state.selectedPlayers.indexOf(item)>=0?'dark':'light'}\n\t\t\t\t\t\t\t\tkey={item}\n\t\t\t\t\t\t\t\tdisabled={enableCurrent?false:(item===this.props.currentPlayer)}\n\t\t\t\t\t\t\t\tonClick={(e) => this.selectPlayer(choiceType, item, e)}>{item}\n\t\t\t\t\t\t\t</ListGroup.Item>})}\n\t\t\t\t</ListGroup>);  \n\t  \t} \n\n\t\treturn list;\n\t}\n\n\trender() {\n\t\tconst list = this.getList();\n\t\tconst card_count = {\n\t\t\t\t\t\t\t\"Assassin\" : 1, \n\t\t\t\t\t\t\t\"Baron\" : 2,\n\t\t\t\t\t\t\t\"Baroness\" : 2,\n\t\t\t\t\t\t\t\"Bishop\" : 1,\n\t\t\t\t\t\t\t\"Cardinal\" : 2,\n\t\t\t\t\t\t\t\"Constable\" : 1,\n\t\t\t\t\t\t\t\"Count\" : 2,\n\t\t\t\t\t\t\t\"Countess\" : 1,\n\t\t\t\t\t\t\t\"Dowager Queen\" : 1,\n\t\t\t\t\t\t\t\"Guard\" : 8, \n\t\t\t\t\t\t\t\"Handmaid\" : 2,\n\t\t\t\t\t\t\t\"Jester\" : 1, \n\t\t\t\t\t\t\t\"King\" : 1,\n\t\t\t\t\t\t\t\"Priest\" : 2, \n\t\t\t\t\t\t\t\"Prince\" : 2,\n\t\t\t\t\t\t\t\"Princess\" : 1,\n\t\t\t\t\t\t\t\"Sycophant\" : 2\n\t\t\t\t\t\t};\n\n\t\tif(list!=null) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Row style={{justifyContent: 'center'}}>\n\t\t\t\t\t\t<Col>{list}</Col>\n\t\t\t\t\t\t{this.props.cardPlayed===\"Guard\"?\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t  \t\t\t\t{Object.entries(card_count).map(([item, value]) => {\n\t\t\t\t\t\t\t\t\t\treturn <ListGroup.Item className='List-item-design'\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={this.state.selectedCard===item?'dark':'light'}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={item} \n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={item===this.props.cardPlayed}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(e) => this.selectCard(item, e)}>{item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Badge variant=\"secondary\" style={{float: 'right'}}>{value}</Badge>\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>})}\n\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t</Col>:\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t</div>}\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row style={{width: '50vw', paddingTop: '10px', margin: 'auto'}}> \n\t\t\t\t\t\t<Button size=\"lg\" block className='Confirm-button' \n\t\t\t\t\t\tdisabled={!this.state.selectionSatisfied}\n\t\t\t\t\t\tonClick={this.endPlay}>OK</Button>\n\t\t\t\t\t</Row>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\treturn (<div>{this.endPlay()}</div>);\n\t\t}\n\t}\n}\n\nexport default PlayCard;\n"]},"metadata":{},"sourceType":"module"}